#plot percentage of missing values in each feature
users_nan = (users.isnull().sum() / users.shape[0]) * 100
users_nan.plot(kind='bar', color='#FD5C64', rot=90)

#plot the three date variables together to see correlation
users['date_account_created'] = pd.to_datetime(users['date_account_created'])
sns.set_style("whitegrid", {'axes.edgecolor': '0'})
sns.set_context("poster", font_scale=1.1)
users.date_account_created.value_counts().plot(kind='line', linewidth=2.2, color='blue')

users['date_first_active'] = pd.to_datetime((users.timestamp_first_active // 1000000), format='%Y%m%d')
users.date_first_active[users['date_first_active']>'2010-01-01'].value_counts().plot(kind='line', linewidth=1.1, color='#FD5C64')

users['date_first_booking'] = pd.to_datetime(users['date_first_booking'])
users.date_first_booking.value_counts().plot(kind='line', linewidth=1.2, color='green')
plt.ylabel('count')

plt.legend(loc='upper left', frameon=False)

#percentage of browser used 
users['first_browser'][users.first_browser.isnull()] = 'Non identified browser'
first_browser = users.shape[0]
first_browser_percentage = users.first_browser.value_counts() / first_browser * 100 # Percentage of browser
width = 0.4 # Bar width
first_browser_percentage[:8].plot(kind='bar', color='#FD5C64', rot=90,fontsize=14)
plt.xlabel('first_browser')
plt.ylabel('%')

#percentage of gender difference in destination country
women = sum(users['gender'] == 'FEMALE')
men = sum(users['gender'] == 'MALE')
female_destinations = users.loc[users['gender'] == 'FEMALE', 'country_destination'].value_counts() / women * 100 # Percentage of Women for each destination
male_destinations = users.loc[users['gender'] == 'MALE', 'country_destination'].value_counts() / men * 100 # Percentage of Men for each destination
width = 0.4 # Bar width
male_destinations.plot(kind='bar', width=width, color='#4DD3C9', position=0, label='Male', rot=0)
female_destinations.plot(kind='bar', width=width, color='#FFA35D', position=1, label='Female', rot=0)
plt.legend()
plt.xlabel('Destination Country')
plt.ylabel('Percentage')
sns.despine()
plt.show()

#percentage of age difference in destination country
age = 30

younger = sum(users.loc[users['age'] < age, 'country_destination'].value_counts())
older = sum(users.loc[users['age'] > age, 'country_destination'].value_counts())

younger_destinations = users.loc[users['age'] < age, 'country_destination'].value_counts() / younger * 100
older_destinations = users.loc[users['age'] > age, 'country_destination'].value_counts() / older * 100

younger_destinations.plot(kind='bar', width=width, color='#63EA55', position=0, label='Youngers', rot=0)
older_destinations.plot(kind='bar', width=width, color='#4DD3C9', position=1, label='Olders', rot=0)

plt.legend()
plt.xlabel('Destination Country')
plt.ylabel('Percentage')

sns.despine()
plt.show()
